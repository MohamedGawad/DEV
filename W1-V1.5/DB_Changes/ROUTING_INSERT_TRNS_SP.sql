create or replace PROCEDURE ROUTING_INSERT_TRNS_SP 
(
  SP_CD IN VARCHAR2 
, SP_INPUT IN CLOB 
, RETURN_VAL OUT VARCHAR2 
) AS 

REF_DOC XMLTYPE;
INQ_ARTY_CD AGCY_SRVC_REQST.INQRD_PARTY_CD%TYPE;

BEGIN
  DBMS_OUTPUT.PUT_LINE('SP_CD>>>>' || SP_CD);
  REF_DOC := SYS.XMLTYPE.CREATEXML(SP_INPUT);

 IF(SP_CD = GLOBAL_CONSTANTS.INSERT_DENY_RQST_SP) then
      INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
      INSERT_DENY_RQST_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_BAN_RQST_SP) then
      INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
      INSERT_BAN_RQST_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_LIFT_RQST_SP) then
     INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
     INSERT_LIFT_RQST_SP(REF_DOC,RETURN_VAL);
     ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_BLOCK_RQST_SP) then
     INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
     INSERT_BLOCK_RQST_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_GARNISH_RQST_SP) then
     INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_DENY_RESP_SP) then
      INSERT_DENY_RESP_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_BAN_RESP_SP) then
      INSERT_BAN_RESP_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_LIFT_RESP_SP) then
      INSERT_LIFT_RESP_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_BLOCK_RESP_SP) then
      INSERT_BLOCK_RESP_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_GARNISH_RESP_SP) then
      DBMS_OUTPUT.PUT_LINE('SP_CD>>>>' || SP_CD);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.UPDATE_COMMON_RQST_DETAILS_SP) then
      UPDATE_COMMON_RQST_DETAILS_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_EXEC_SUMMARY_SP ) then
      INSERT_EXEC_SUMMARY_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_EXEC_RUNNING_TOTAL_SP ) then
      INSERT_EXEC_RUNNING_TOTAL_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_FI_BAN_SUM_VALID_SP ) then
      INSERT_FI_BAN_SUM_VALID_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_FI_DENY_SUM_VALID_SP ) then
      INSERT_FI_DENY_SUM_VALID_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_FI_LIFT_SUM_VALID_SP ) then
      INSERT_FI_LIFT_SUM_VALID_SP(REF_DOC,RETURN_VAL);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_FI_BLOCK_SUM_VALID_SP ) then
      INSERT_FI_BLOCK_SUM_VALID_SP(REF_DOC,RETURN_VAL);
       ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_GI_RQST_SP ) then
        INSERT_COMMON_DETAILS_SP(REF_DOC,RETURN_VAL, INQ_ARTY_CD);
      INSERT_GI_RQST_SP(REF_DOC, RETURN_VAL, INQ_ARTY_CD);
        ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_GI_RESP_SP ) then
      INSERT_GI_RESP_SP(REF_DOC);
      ELSIF (SP_CD = GLOBAL_CONSTANTS.INSERT_FI_GI_SUM_VALID_SP ) then
      INSERT_FI_GI_SUM_VALID_SP(REF_DOC,RETURN_VAL);
     ELSE
      Raise_application_error(-20322, 'INVALID SERVICE CODE');
 END IF;
EXCEPTION
  WHEN OTHERs THEN
      Raise_application_error(-20322, 'UNKNOWN ERROR>>'|| SQLERRM); 
END ROUTING_INSERT_TRNS_SP;